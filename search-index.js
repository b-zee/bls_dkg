var searchIndex = JSON.parse('{\
"bls_dkg":{"doc":"","i":[[0,"key_gen","bls_dkg","",null,null],[3,"Part","bls_dkg::key_gen","A contribution by a node for the key generation. The part…",null,null],[3,"Acknowledgment","","A confirmation that we have received and verified a…",null,null],[3,"KeyGen","","An algorithm for dealerless distributed key generation.",null,null],[4,"Error","","A local error while handling a message, that was not…",null,null],[13,"Unknown","","Unknown error.",0,null],[13,"UnknownSender","","Unknown sender.",0,null],[13,"Serialization","","Failed to serialize message.",0,null],[13,"QuicP2P","","Network error from Quic-P2P.",0,null],[13,"Encryption","","Failed to encrypt message.",0,null],[13,"TooManyNonVoters","","Failed to finalize Complaint phase due to too many…",0,null],[13,"UnexpectedPhase","","Unexpected phase.",0,null],[12,"expected","bls_dkg::key_gen::Error","",1,null],[12,"actual","","",1,null],[13,"MissingPart","bls_dkg::key_gen","Ack on a missed part.",0,null],[4,"PartOutcome","","The outcome of handling and verifying a `Part` message.",null,null],[13,"Valid","","The message was valid: the part of it that was encrypted…",2,null],[13,"Invalid","","The message was invalid: We now know that the proposer is…",2,null],[4,"Phase","","",null,null],[13,"Initialization","","",3,null],[13,"Contribution","","",3,null],[13,"Complaining","","",3,null],[13,"Justification","","",3,null],[13,"Commitment","","",3,null],[13,"Finalization","","",3,null],[4,"AcknowledgmentFault","","`Acknowledgment` faulty entries.",null,null],[13,"ValueCount","","The number of values differs from the number of nodes.",4,null],[13,"MissingPart","","No corresponding Part received.",4,null],[13,"DecryptValue","","Value decryption failed.",4,null],[13,"DeserializeValue","","Value deserialization failed.",4,null],[13,"ValueAcknowledgment","","Value doesn\'t match the ack.",4,null],[4,"PartFault","","`Part` faulty entries.",null,null],[13,"RowCount","","The number of rows differs from the number of nodes.",5,null],[13,"MultipleParts","","Received multiple different Part messages from the same…",5,null],[13,"DecryptRow","","Could not decrypt our row in the Part message.",5,null],[13,"DeserializeRow","","Could not deserialize our row in the Part message.",5,null],[13,"RowAcknowledgment","","Row does not match the ack.",5,null],[0,"message","","",null,null],[4,"Message","bls_dkg::key_gen::message","Messages used for running BLS DKG.",null,null],[13,"Initialization","","",6,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",7,null],[12,"m","","",7,null],[12,"n","","",7,null],[12,"member_list","","",7,null],[13,"Proposal","bls_dkg::key_gen::message","",6,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",8,null],[12,"part","","",8,null],[13,"Complaint","bls_dkg::key_gen::message","",6,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",9,null],[12,"target","","",9,null],[12,"msg","","",9,null],[13,"Justification","bls_dkg::key_gen::message","",6,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",10,null],[12,"keys_map","","",10,null],[13,"Acknowledgment","bls_dkg::key_gen::message","",6,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",11,null],[12,"ack","","",11,null],[0,"outcome","bls_dkg::key_gen","",null,null],[3,"Outcome","bls_dkg::key_gen::outcome","DKG result",null,null],[12,"public_key_set","","Public key set to verify threshold signatures",12,null],[12,"secret_key_share","","Secret Key share.",12,null],[11,"new","","Create Outcome from components",12,[[["publickeyset",3],["secretkeyshare",3]]]],[11,"initialize","bls_dkg::key_gen","Creates a new `KeyGen` instance, together with the…",13,[[["xorname",3],["btreeset",3]],[["error",4],["result",4]]]],[11,"phase","","",13,[[],["phase",4]]],[11,"handle_message","","Dispatching an incoming dkg message.",13,[[["message",4]],[["error",4],["vec",3],["result",4]]]],[11,"all_contribution_received","","",13,[[]]],[11,"timed_phase_transition","","",13,[[],[["error",4],["vec",3],["result",4]]]],[11,"is_finalized","","Returns `true` if in the phase of Finalization.",13,[[]]],[11,"generate_keys","","Returns the new secret key share and the public key set.",13,[[],["option",4]]],[11,"possible_blockers","","This function shall be called when the DKG procedure not…",13,[[],[["xorname",3],["btreeset",3]]]],[0,"member","bls_dkg","",null,null],[3,"Member","bls_dkg::member","",null,null],[3,"NodeID","","",null,null],[3,"KeyInfo","","",null,null],[0,"signing","","Signing and verification.",null,null],[3,"PublicKey","bls_dkg::member::signing","A public key.",null,null],[3,"SecretKey","","A secret key; wraps a single prime field element. The…",null,null],[3,"Signature","","A signature.",null,null],[17,"SIG_SIZE","","The size of a signature\'s representation in bytes.",null,null],[0,"encryption","bls_dkg::member","Encryption and decryption",null,null],[3,"PublicKey","bls_dkg::member::encryption","An ed25519 public key.",null,null],[3,"SecretKey","","An EdDSA secret key.",null,null],[17,"WAITING_TIME","bls_dkg::member","Time to wait before starting `timed_phase_transition` in…",null,null],[11,"new","","Setup a Member to start DKG",14,[[["config",3]],[["error",4],["result",4]]]],[11,"connect_to_group","","Connects to every member in the given group",14,[[["nodeid",3],["hashmap",3],["socketaddr",4]]]],[11,"init_dkg","","Initialize DKG with the connected nodes and returns back…",14,[[],[["error",4],["message",4],["result",4]]]],[11,"broadcast","","Broadcast given message to all the connected peers",14,[[["message",4]],[["error",4],["result",4]]]],[11,"start_timed_phase_transition","","Begins timed phase transition",14,[[],[["error",4],["vec",3],["result",4]]]],[11,"id","","Fetches our NodeID",14,[[],["nodeid",3]]],[11,"is_ready","","Check if our node is ready to generate Keys safely",14,[[],[["error",4],["result",4]]]],[11,"close","","Terminate the QUIC connections gracefully.",14,[[]]],[11,"generate_keys","","Generate keys from the key_gen",14,[[],[["error",4],["result",4]]]],[11,"phase","","Returns the Phase the Node is at.",14,[[],[["result",4],["error",4],["phase",4]]]],[11,"name","","",15,[[],["xorname",3]]],[11,"new","","",16,[[]]],[11,"node_id","","",16,[[],["nodeid",3]]],[11,"name","","",16,[[],["xorname",3]]],[11,"from","bls_dkg::key_gen","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"equivalent","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"equivalent","","",18,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"as_fail","","",0,[[],["fail",8]]],[11,"equivalent","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"as_fail","","",4,[[],["fail",8]]],[11,"equivalent","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"as_fail","","",5,[[],["fail",8]]],[11,"equivalent","","",5,[[]]],[11,"from","bls_dkg::key_gen::message","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"equivalent","","",6,[[]]],[11,"from","bls_dkg::key_gen::outcome","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","bls_dkg::member","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"equivalent","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"equivalent","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"initialize","","",16,[[]]],[11,"from","bls_dkg::member::signing","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"equivalent","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"zeroize","","",20,[[]]],[11,"equivalent","","",20,[[]]],[11,"clear","","",20,[[]]],[11,"initialize","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"equivalent","","",21,[[]]],[11,"from","bls_dkg::member::encryption","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"equivalent","","",22,[[]]],[11,"clear","","",22,[[]]],[11,"initialize","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"clear","","",23,[[]]],[11,"initialize","","",23,[[]]],[11,"drop","bls_dkg::member::signing","",20,[[]]],[11,"cmp","","",19,[[["publickey",3]],["ordering",4]]],[11,"cmp","","",21,[[["signature",3]],["ordering",4]]],[11,"eq","","",19,[[["publickey",3]]]],[11,"ne","","",19,[[["publickey",3]]]],[11,"eq","","",20,[[["secretkey",3]]]],[11,"ne","","",20,[[["secretkey",3]]]],[11,"eq","","",21,[[["signature",3]]]],[11,"ne","","",21,[[["signature",3]]]],[11,"deserialize","","",19,[[],[["result",4],["publickey",3]]]],[11,"deserialize","","",21,[[],[["result",4],["signature",3]]]],[11,"deserialize","","",20,[[],[["secretkey",3],["result",4]]]],[11,"clone","","",20,[[],["secretkey",3]]],[11,"clone","","",19,[[],["publickey",3]]],[11,"clone","","",21,[[],["signature",3]]],[11,"fmt","","",20,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",19,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",21,[[["formatter",3]],[["error",3],["result",4]]]],[11,"zeroize","","",20,[[]]],[11,"default","","",20,[[],["secretkey",3]]],[11,"hash","","",21,[[]]],[11,"hash","","",19,[[]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"partial_cmp","","",21,[[["signature",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",19,[[["publickey",3]],[["ordering",4],["option",4]]]],[11,"serialize","bls_dkg::member::encryption","",23,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"cmp","","",22,[[["publickey",3]],["ordering",4]]],[11,"from","","Derive this public key from its corresponding `SecretKey`.",22,[[["secretkey",3]],["publickey",3]]],[11,"from","","Derive this public key from its corresponding…",22,[[["expandedsecretkey",3]],["publickey",3]]],[11,"eq","","",22,[[["publickey",3]]]],[11,"ne","","",22,[[["publickey",3]]]],[11,"drop","","",23,[[]]],[11,"default","","",23,[[],["secretkey",3]]],[11,"default","","",22,[[],["publickey",3]]],[11,"hash","","",22,[[]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"deserialize","","",23,[[],[["result",4],["secretkey",3]]]],[11,"deserialize","","",22,[[],[["publickey",3],["result",4]]]],[11,"clone","","",22,[[],["publickey",3]]],[11,"partial_cmp","","",22,[[["publickey",3]],[["ordering",4],["option",4]]]],[11,"as_ref","","",22,[[]]],[11,"as_ref","","",23,[[]]],[11,"from","bls_dkg::key_gen","",0,[[["box",3],["errorkind",4]],["error",4]]],[11,"clone","bls_dkg::key_gen::message","",6,[[],["message",4]]],[11,"clone","bls_dkg::key_gen::outcome","",12,[[],["outcome",3]]],[11,"clone","bls_dkg::key_gen","",0,[[],["error",4]]],[11,"clone","","",17,[[],["part",3]]],[11,"clone","","",18,[[],["acknowledgment",3]]],[11,"clone","","",3,[[],["phase",4]]],[11,"clone","","",4,[[],["acknowledgmentfault",4]]],[11,"clone","","",5,[[],["partfault",4]]],[11,"clone","bls_dkg::member","",15,[[],["nodeid",3]]],[11,"default","","",16,[[]]],[11,"cmp","bls_dkg::key_gen::message","",6,[[["message",4]],["ordering",4]]],[11,"cmp","bls_dkg::key_gen","",17,[[["part",3]],["ordering",4]]],[11,"cmp","","",18,[[["acknowledgment",3]],["ordering",4]]],[11,"cmp","","",4,[[["acknowledgmentfault",4]],["ordering",4]]],[11,"cmp","","",5,[[["partfault",4]],["ordering",4]]],[11,"cmp","bls_dkg::member","",14,[[],["ordering",4]]],[11,"cmp","","",15,[[["nodeid",3]],["ordering",4]]],[11,"eq","bls_dkg::key_gen::message","",6,[[["message",4]]]],[11,"ne","","",6,[[["message",4]]]],[11,"eq","bls_dkg::key_gen","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"eq","","",17,[[["part",3]]]],[11,"ne","","",17,[[["part",3]]]],[11,"eq","","",18,[[["acknowledgment",3]]]],[11,"ne","","",18,[[["acknowledgment",3]]]],[11,"eq","","",3,[[["phase",4]]]],[11,"eq","","",4,[[["acknowledgmentfault",4]]]],[11,"eq","","",5,[[["partfault",4]]]],[11,"eq","bls_dkg::member","",14,[[]]],[11,"eq","","",15,[[["nodeid",3]]]],[11,"ne","","",15,[[["nodeid",3]]]],[11,"partial_cmp","bls_dkg::key_gen::message","",6,[[["message",4]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["message",4]]]],[11,"le","","",6,[[["message",4]]]],[11,"gt","","",6,[[["message",4]]]],[11,"ge","","",6,[[["message",4]]]],[11,"partial_cmp","bls_dkg::key_gen","",17,[[["part",3]],[["option",4],["ordering",4]]]],[11,"lt","","",17,[[["part",3]]]],[11,"le","","",17,[[["part",3]]]],[11,"gt","","",17,[[["part",3]]]],[11,"ge","","",17,[[["part",3]]]],[11,"partial_cmp","","",18,[[["acknowledgment",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["acknowledgment",3]]]],[11,"le","","",18,[[["acknowledgment",3]]]],[11,"gt","","",18,[[["acknowledgment",3]]]],[11,"ge","","",18,[[["acknowledgment",3]]]],[11,"partial_cmp","","",4,[[["acknowledgmentfault",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",5,[[["partfault",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","bls_dkg::member","",14,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",15,[[["nodeid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",15,[[["nodeid",3]]]],[11,"le","","",15,[[["nodeid",3]]]],[11,"gt","","",15,[[["nodeid",3]]]],[11,"ge","","",15,[[["nodeid",3]]]],[11,"fmt","bls_dkg::key_gen::message","",6,[[["formatter",3]],["result",6]]],[11,"fmt","bls_dkg::key_gen::outcome","",12,[[["formatter",3]],["result",6]]],[11,"fmt","bls_dkg::key_gen","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","bls_dkg::member","",15,[[["formatter",3]],["result",6]]],[11,"fmt","bls_dkg::key_gen","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","bls_dkg::member","",15,[[]]],[11,"description","bls_dkg::key_gen","",0,[[]]],[11,"cause","","",0,[[],[["error",8],["option",4]]]],[11,"source","","",0,[[],[["error",8],["option",4]]]],[11,"description","","",4,[[]]],[11,"cause","","",4,[[],[["error",8],["option",4]]]],[11,"source","","",4,[[],[["error",8],["option",4]]]],[11,"description","","",5,[[]]],[11,"cause","","",5,[[],[["error",8],["option",4]]]],[11,"source","","",5,[[],[["error",8],["option",4]]]],[11,"deserialize","bls_dkg::key_gen::message","",6,[[],["result",4]]],[11,"deserialize","bls_dkg::key_gen","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","bls_dkg::member","",15,[[],["result",4]]],[11,"serialize","bls_dkg::key_gen::message","",6,[[],["result",4]]],[11,"serialize","bls_dkg::key_gen","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","bls_dkg::member","",15,[[],["result",4]]],[11,"verify_g2","bls_dkg::member::signing","Returns `true` if the signature matches the element of `G2`.",19,[[["signature",3]]]],[11,"verify","","Returns `true` if the signature matches the message.",19,[[["signature",3]]]],[11,"encrypt","","Encrypts the message using the OS random number generator.",19,[[],["ciphertext",3]]],[11,"encrypt_with_rng","","Encrypts the message.",19,[[],["ciphertext",3]]],[11,"from_bytes","","Returns the key with the given representation, if valid.",19,[[],[["result",4],["frombyteserror",4],["publickey",3]]]],[11,"to_bytes","","Returns a byte string representation of the public key.",19,[[]]],[11,"from_mut","","Creates a new `SecretKey` from a mutable reference to a…",20,[[["fr",3]],["secretkey",3]]],[11,"random","","Creates a new random instance of `SecretKey`. If you want…",20,[[],["secretkey",3]]],[11,"public_key","","Returns the matching public key.",20,[[],["publickey",3]]],[11,"sign_g2","","Signs the given element of `G2`.",20,[[],["signature",3]]],[11,"sign","","Signs the given message.",20,[[],["signature",3]]],[11,"decrypt","","Returns the decrypted text, or `None`, if the ciphertext…",20,[[["ciphertext",3]],[["option",4],["vec",3]]]],[11,"reveal","","Generates a non-redacted debug string. This method differs…",20,[[],["string",3]]],[11,"parity","","Returns `true` if the signature contains an odd number of…",21,[[]]],[11,"from_bytes","","Returns the signature with the given representation, if…",21,[[],[["result",4],["signature",3],["frombyteserror",4]]]],[11,"to_bytes","","Returns a byte string representation of the signature.",21,[[]]],[11,"to_bytes","bls_dkg::member::encryption","Convert this public key to a byte array.",22,[[]]],[11,"as_bytes","","View this public key as a byte array.",22,[[]]],[11,"from_bytes","","Construct a `PublicKey` from a slice of bytes.",22,[[],[["publickey",3],["result",4],["signatureerror",3]]]],[11,"verify","","Verify a signature on a message with this keypair\'s public…",22,[[["signature",3]],[["signatureerror",3],["result",4]]]],[11,"verify_prehashed","","Verify a `signature` on a `prehashed_message` using the…",22,[[["signature",3],["option",4]],[["signatureerror",3],["result",4]]]],[11,"verify_strict","","Strictly verify a signature on a message with this…",22,[[["signature",3]],[["signatureerror",3],["result",4]]]],[11,"to_bytes","","Convert this secret key to a byte array.",23,[[]]],[11,"as_bytes","","View this secret key as a byte array.",23,[[]]],[11,"from_bytes","","Construct a `SecretKey` from a slice of bytes.",23,[[],[["signatureerror",3],["secretkey",3],["result",4]]]],[11,"generate","","Generate a `SecretKey` from a `csprng`.",23,[[],["secretkey",3]]]],"p":[[4,"Error"],[13,"UnexpectedPhase"],[4,"PartOutcome"],[4,"Phase"],[4,"AcknowledgmentFault"],[4,"PartFault"],[4,"Message"],[13,"Initialization"],[13,"Proposal"],[13,"Complaint"],[13,"Justification"],[13,"Acknowledgment"],[3,"Outcome"],[3,"KeyGen"],[3,"Member"],[3,"NodeID"],[3,"KeyInfo"],[3,"Part"],[3,"Acknowledgment"],[3,"PublicKey"],[3,"SecretKey"],[3,"Signature"],[3,"PublicKey"],[3,"SecretKey"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);