var searchIndex = JSON.parse('{\
"bls_dkg":{"doc":"","i":[[0,"id","bls_dkg","",null,null],[8,"PublicId","bls_dkg::id","The public identity of a node. It provides functionality…",null,null],[16,"Signature","","The signature type associated with the chosen asymmetric…",0,null],[10,"verify_signature","","Verifies `signature` against `data` using this `PublicId`.…",0,[[]]],[8,"SecretId","","The secret identity of a node. It provides functionality…",null,null],[16,"PublicId","","The associated public identity type.",1,null],[10,"public_id","","Returns the associated public identity.",1,[[]]],[0,"key_gen","bls_dkg","",null,null],[3,"Part","bls_dkg::key_gen","A contribution by a node for the key generation. The part…",null,null],[3,"Acknowledgment","","A confirmation that we have received and verified a…",null,null],[3,"KeyGen","","An algorithm for dealerless distributed key generation.",null,null],[4,"Error","","A local error while handling a message, that was not…",null,null],[13,"Unknown","","Unknown error.",2,null],[13,"UnknownSender","","Unknown sender.",2,null],[13,"Serialization","","Failed to serialize message.",2,null],[13,"QuicP2P","","Network error from Quic-P2P.",2,null],[13,"Encryption","","Failed to encrypt message.",2,null],[13,"TooManyNonVoters","","Failed to finalize Complaint phase due to too many…",2,null],[13,"UnexpectedPhase","","Unexpected phase.",2,null],[12,"expected","bls_dkg::key_gen::Error","",3,null],[12,"actual","","",3,null],[13,"MissingPart","bls_dkg::key_gen","Ack on a missed part.",2,null],[4,"PartOutcome","","The outcome of handling and verifying a `Part` message.",null,null],[13,"Valid","","The message was valid: the part of it that was encrypted…",4,null],[13,"Invalid","","The message was invalid: We now know that the proposer is…",4,null],[4,"Phase","","",null,null],[13,"Initialization","","",5,null],[13,"Contribution","","",5,null],[13,"Complaining","","",5,null],[13,"Justification","","",5,null],[13,"Commitment","","",5,null],[13,"Finalization","","",5,null],[4,"AcknowledgmentFault","","`Acknowledgment` faulty entries.",null,null],[13,"ValueCount","","The number of values differs from the number of nodes.",6,null],[13,"MissingPart","","No corresponding Part received.",6,null],[13,"DecryptValue","","Value decryption failed.",6,null],[13,"DeserializeValue","","Value deserialization failed.",6,null],[13,"ValueAcknowledgment","","Value doesn\'t match the ack.",6,null],[4,"PartFault","","`Part` faulty entries.",null,null],[13,"RowCount","","The number of rows differs from the number of nodes.",7,null],[13,"MultipleParts","","Received multiple different Part messages from the same…",7,null],[13,"DecryptRow","","Could not decrypt our row in the Part message.",7,null],[13,"DeserializeRow","","Could not deserialize our row in the Part message.",7,null],[13,"RowAcknowledgment","","Row does not match the ack.",7,null],[0,"message","","",null,null],[4,"Message","bls_dkg::key_gen::message","Messages used for running BLS DKG.",null,null],[13,"Initialization","","",8,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",9,null],[12,"m","","",9,null],[12,"n","","",9,null],[12,"member_list","","",9,null],[13,"Proposal","bls_dkg::key_gen::message","",8,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",10,null],[12,"part","","",10,null],[13,"Complaint","bls_dkg::key_gen::message","",8,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",11,null],[12,"target","","",11,null],[12,"msg","","",11,null],[13,"Justification","bls_dkg::key_gen::message","",8,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",12,null],[12,"keys_map","","",12,null],[13,"Acknowledgment","bls_dkg::key_gen::message","",8,null],[12,"key_gen_id","bls_dkg::key_gen::message::Message","",13,null],[12,"ack","","",13,null],[0,"outcome","bls_dkg::key_gen","",null,null],[3,"Outcome","bls_dkg::key_gen::outcome","DKG result",null,null],[12,"public_key_set","","Public key set to verify threshold signatures",14,null],[12,"secret_key_share","","Secret Key share.",14,null],[11,"new","","Create Outcome from components",14,[[["publickeyset",3],["secretkeyshare",3]]]],[11,"initialize","bls_dkg::key_gen","Creates a new `KeyGen` instance, together with the…",15,[[["btreeset",3]],[["result",4],["error",4]]]],[11,"phase","","",15,[[],["phase",4]]],[11,"handle_message","","Dispatching an incoming dkg message.",15,[[["message",4]],[["error",4],["result",4],["vec",3]]]],[11,"all_contribution_received","","",15,[[]]],[11,"timed_phase_transition","","",15,[[],[["error",4],["result",4],["vec",3]]]],[11,"is_finalized","","Returns `true` if in the phase of Finalization.",15,[[]]],[11,"generate_keys","","Returns the new secret key share and the public key set.",15,[[],["option",4]]],[11,"possible_blockers","","This function shall be called when the DKG procedure not…",15,[[],["btreeset",3]]],[0,"member","bls_dkg","",null,null],[3,"Member","bls_dkg::member","",null,null],[3,"NodeID","","",null,null],[3,"KeyInfo","","",null,null],[0,"signing","","Signing and verification.",null,null],[3,"PublicKey","bls_dkg::member::signing","A public key.",null,null],[3,"SecretKey","","A secret key; wraps a single prime field element. The…",null,null],[3,"Signature","","A signature.",null,null],[17,"SIG_SIZE","","The size of a signature\'s representation in bytes.",null,null],[0,"encryption","bls_dkg::member","Encryption and decryption",null,null],[3,"PublicKey","bls_dkg::member::encryption","An ed25519 public key.",null,null],[3,"SecretKey","","An EdDSA secret key.",null,null],[17,"WAITING_TIME","bls_dkg::member","Time to wait before starting `timed_phase_transition` in…",null,null],[11,"new","","Setup a Member to start DKG",16,[[["config",3]],[["result",4],["error",4]]]],[11,"connect_to_group","","Connects to every member in the given group",16,[[["hashmap",3],["nodeid",3],["socketaddr",4]]]],[11,"init_dkg","","Initialize DKG with the connected nodes and returns back…",16,[[],[["result",4],["message",4],["error",4]]]],[11,"broadcast","","Broadcast given message to all the connected peers",16,[[["message",4],["nodeid",3]],[["error",4],["result",4]]]],[11,"start_timed_phase_transition","","Begins timed phase transition",16,[[],[["error",4],["result",4],["vec",3]]]],[11,"id","","Fetches our NodeID",16,[[],["nodeid",3]]],[11,"is_ready","","Check if our node is ready to generate Keys safely",16,[[],[["error",4],["result",4]]]],[11,"close","","Terminate the QUIC connections gracefully.",16,[[]]],[11,"generate_keys","","Generate keys from the key_gen",16,[[],[["result",4],["error",4]]]],[11,"phase","","Returns the Phase the Node is at.",16,[[],[["phase",4],["result",4],["error",4]]]],[11,"new","","",17,[[]]],[11,"node_id","","",17,[[],["nodeid",3]]],[11,"from","bls_dkg::key_gen","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"equivalent","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"equivalent","","",19,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"as_fail","","",2,[[],["fail",8]]],[11,"equivalent","","",2,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"equivalent","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"as_fail","","",6,[[],["fail",8]]],[11,"equivalent","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"as_fail","","",7,[[],["fail",8]]],[11,"equivalent","","",7,[[]]],[11,"from","bls_dkg::key_gen::message","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"from","bls_dkg::key_gen::outcome","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","bls_dkg::member","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"equivalent","","",16,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"equivalent","","",20,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"clear","","",17,[[]]],[11,"initialize","","",17,[[]]],[11,"from","bls_dkg::member::signing","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"equivalent","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"zeroize","","",22,[[]]],[11,"equivalent","","",22,[[]]],[11,"clear","","",22,[[]]],[11,"initialize","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"equivalent","","",23,[[]]],[11,"from","bls_dkg::member::encryption","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"equivalent","","",24,[[]]],[11,"clear","","",24,[[]]],[11,"initialize","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"clear","","",25,[[]]],[11,"initialize","","",25,[[]]],[11,"deserialize","bls_dkg::member::signing","",22,[[],[["result",4],["secretkey",3]]]],[11,"deserialize","","",21,[[],[["publickey",3],["result",4]]]],[11,"deserialize","","",23,[[],[["result",4],["signature",3]]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"zeroize","","",22,[[]]],[11,"clone","","",21,[[],["publickey",3]]],[11,"clone","","",23,[[],["signature",3]]],[11,"clone","","",22,[[],["secretkey",3]]],[11,"default","","",22,[[],["secretkey",3]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",21,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",21,[[]]],[11,"hash","","",23,[[]]],[11,"partial_cmp","","",21,[[["publickey",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",23,[[["signature",3]],[["option",4],["ordering",4]]]],[11,"eq","","",21,[[["publickey",3]]]],[11,"ne","","",21,[[["publickey",3]]]],[11,"eq","","",22,[[["secretkey",3]]]],[11,"ne","","",22,[[["secretkey",3]]]],[11,"eq","","",23,[[["signature",3]]]],[11,"ne","","",23,[[["signature",3]]]],[11,"cmp","","",23,[[["signature",3]],["ordering",4]]],[11,"cmp","","",21,[[["publickey",3]],["ordering",4]]],[11,"drop","","",22,[[]]],[11,"drop","bls_dkg::member::encryption","",25,[[]]],[11,"hash","","",24,[[]]],[11,"default","","",24,[[],["publickey",3]]],[11,"default","","",25,[[],["secretkey",3]]],[11,"fmt","","",24,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",25,[[["formatter",3]],[["error",3],["result",4]]]],[11,"cmp","","",24,[[["publickey",3]],["ordering",4]]],[11,"eq","","",24,[[["publickey",3]]]],[11,"ne","","",24,[[["publickey",3]]]],[11,"from","","Derive this public key from its corresponding…",24,[[["expandedsecretkey",3]],["publickey",3]]],[11,"from","","Derive this public key from its corresponding `SecretKey`.",24,[[["secretkey",3]],["publickey",3]]],[11,"deserialize","","",25,[[],[["result",4],["secretkey",3]]]],[11,"deserialize","","",24,[[],[["publickey",3],["result",4]]]],[11,"clone","","",24,[[],["publickey",3]]],[11,"partial_cmp","","",24,[[["publickey",3]],[["option",4],["ordering",4]]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"as_ref","","",25,[[]]],[11,"as_ref","","",24,[[]]],[11,"verify_signature","bls_dkg::member","",20,[[]]],[11,"public_id","","",17,[[]]],[11,"from","bls_dkg::key_gen","",2,[[["box",3],["errorkind",4]],["error",4]]],[11,"clone","bls_dkg::key_gen::message","",8,[[],["message",4]]],[11,"clone","bls_dkg::key_gen::outcome","",14,[[],["outcome",3]]],[11,"clone","bls_dkg::key_gen","",2,[[],["error",4]]],[11,"clone","","",18,[[],["part",3]]],[11,"clone","","",19,[[],["acknowledgment",3]]],[11,"clone","","",5,[[],["phase",4]]],[11,"clone","","",6,[[],["acknowledgmentfault",4]]],[11,"clone","","",7,[[],["partfault",4]]],[11,"clone","bls_dkg::member","",20,[[],["nodeid",3]]],[11,"default","","",17,[[]]],[11,"cmp","bls_dkg::key_gen::message","",8,[[["message",4]],["ordering",4]]],[11,"cmp","bls_dkg::key_gen","",18,[[["part",3]],["ordering",4]]],[11,"cmp","","",19,[[["acknowledgment",3]],["ordering",4]]],[11,"cmp","","",6,[[["acknowledgmentfault",4]],["ordering",4]]],[11,"cmp","","",7,[[["partfault",4]],["ordering",4]]],[11,"cmp","bls_dkg::member","",16,[[],["ordering",4]]],[11,"cmp","","",20,[[["nodeid",3]],["ordering",4]]],[11,"eq","bls_dkg::key_gen::message","",8,[[["message",4]]]],[11,"ne","","",8,[[["message",4]]]],[11,"eq","bls_dkg::key_gen","",2,[[["error",4]]]],[11,"ne","","",2,[[["error",4]]]],[11,"eq","","",18,[[["part",3]]]],[11,"ne","","",18,[[["part",3]]]],[11,"eq","","",19,[[["acknowledgment",3]]]],[11,"ne","","",19,[[["acknowledgment",3]]]],[11,"eq","","",5,[[["phase",4]]]],[11,"eq","","",6,[[["acknowledgmentfault",4]]]],[11,"eq","","",7,[[["partfault",4]]]],[11,"eq","bls_dkg::member","",16,[[]]],[11,"eq","","",20,[[["nodeid",3]]]],[11,"ne","","",20,[[["nodeid",3]]]],[11,"partial_cmp","bls_dkg::key_gen::message","",8,[[["message",4]],[["ordering",4],["option",4]]]],[11,"lt","","",8,[[["message",4]]]],[11,"le","","",8,[[["message",4]]]],[11,"gt","","",8,[[["message",4]]]],[11,"ge","","",8,[[["message",4]]]],[11,"partial_cmp","bls_dkg::key_gen","",18,[[["part",3]],[["ordering",4],["option",4]]]],[11,"lt","","",18,[[["part",3]]]],[11,"le","","",18,[[["part",3]]]],[11,"gt","","",18,[[["part",3]]]],[11,"ge","","",18,[[["part",3]]]],[11,"partial_cmp","","",19,[[["acknowledgment",3]],[["ordering",4],["option",4]]]],[11,"lt","","",19,[[["acknowledgment",3]]]],[11,"le","","",19,[[["acknowledgment",3]]]],[11,"gt","","",19,[[["acknowledgment",3]]]],[11,"ge","","",19,[[["acknowledgment",3]]]],[11,"partial_cmp","","",6,[[["acknowledgmentfault",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",7,[[["partfault",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","bls_dkg::member","",16,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",20,[[["nodeid",3]],[["ordering",4],["option",4]]]],[11,"lt","","",20,[[["nodeid",3]]]],[11,"le","","",20,[[["nodeid",3]]]],[11,"gt","","",20,[[["nodeid",3]]]],[11,"ge","","",20,[[["nodeid",3]]]],[11,"fmt","bls_dkg::key_gen::message","",8,[[["formatter",3]],["result",6]]],[11,"fmt","bls_dkg::key_gen::outcome","",14,[[["formatter",3]],["result",6]]],[11,"fmt","bls_dkg::key_gen","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","bls_dkg::member","",20,[[["formatter",3]],["result",6]]],[11,"fmt","bls_dkg::key_gen","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"hash","","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","bls_dkg::member","",20,[[]]],[11,"description","bls_dkg::key_gen","",2,[[]]],[11,"cause","","",2,[[],[["option",4],["error",8]]]],[11,"source","","",2,[[],[["option",4],["error",8]]]],[11,"description","","",6,[[]]],[11,"cause","","",6,[[],[["option",4],["error",8]]]],[11,"source","","",6,[[],[["option",4],["error",8]]]],[11,"description","","",7,[[]]],[11,"cause","","",7,[[],[["option",4],["error",8]]]],[11,"source","","",7,[[],[["option",4],["error",8]]]],[11,"serialize","bls_dkg::key_gen::message","",8,[[],["result",4]]],[11,"serialize","bls_dkg::key_gen","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","bls_dkg::member","",20,[[],["result",4]]],[11,"deserialize","bls_dkg::key_gen::message","",8,[[],["result",4]]],[11,"deserialize","bls_dkg::key_gen","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","bls_dkg::member","",20,[[],["result",4]]],[11,"verify_g2","bls_dkg::member::signing","Returns `true` if the signature matches the element of `G2`.",21,[[["signature",3]]]],[11,"verify","","Returns `true` if the signature matches the message.",21,[[["signature",3]]]],[11,"encrypt","","Encrypts the message using the OS random number generator.",21,[[],["ciphertext",3]]],[11,"encrypt_with_rng","","Encrypts the message.",21,[[],["ciphertext",3]]],[11,"from_bytes","","Returns the key with the given representation, if valid.",21,[[],[["publickey",3],["frombyteserror",4],["result",4]]]],[11,"to_bytes","","Returns a byte string representation of the public key.",21,[[]]],[11,"from_mut","","Creates a new `SecretKey` from a mutable reference to a…",22,[[["fr",3]],["secretkey",3]]],[11,"random","","Creates a new random instance of `SecretKey`. If you want…",22,[[],["secretkey",3]]],[11,"public_key","","Returns the matching public key.",22,[[],["publickey",3]]],[11,"sign_g2","","Signs the given element of `G2`.",22,[[],["signature",3]]],[11,"sign","","Signs the given message.",22,[[],["signature",3]]],[11,"decrypt","","Returns the decrypted text, or `None`, if the ciphertext…",22,[[["ciphertext",3]],[["option",4],["vec",3]]]],[11,"reveal","","Generates a non-redacted debug string. This method differs…",22,[[],["string",3]]],[11,"parity","","Returns `true` if the signature contains an odd number of…",23,[[]]],[11,"from_bytes","","Returns the signature with the given representation, if…",23,[[],[["frombyteserror",4],["signature",3],["result",4]]]],[11,"to_bytes","","Returns a byte string representation of the signature.",23,[[]]],[11,"to_bytes","bls_dkg::member::encryption","Convert this public key to a byte array.",24,[[]]],[11,"as_bytes","","View this public key as a byte array.",24,[[]]],[11,"from_bytes","","Construct a `PublicKey` from a slice of bytes.",24,[[],[["publickey",3],["signatureerror",3],["result",4]]]],[11,"verify","","Verify a signature on a message with this keypair\'s public…",24,[[["signature",3]],[["signatureerror",3],["result",4]]]],[11,"verify_prehashed","","Verify a `signature` on a `prehashed_message` using the…",24,[[["signature",3],["option",4]],[["signatureerror",3],["result",4]]]],[11,"verify_strict","","Strictly verify a signature on a message with this…",24,[[["signature",3]],[["signatureerror",3],["result",4]]]],[11,"to_bytes","","Convert this secret key to a byte array.",25,[[]]],[11,"as_bytes","","View this secret key as a byte array.",25,[[]]],[11,"from_bytes","","Construct a `SecretKey` from a slice of bytes.",25,[[],[["result",4],["signatureerror",3],["secretkey",3]]]],[11,"generate","","Generate a `SecretKey` from a `csprng`.",25,[[],["secretkey",3]]]],"p":[[8,"PublicId"],[8,"SecretId"],[4,"Error"],[13,"UnexpectedPhase"],[4,"PartOutcome"],[4,"Phase"],[4,"AcknowledgmentFault"],[4,"PartFault"],[4,"Message"],[13,"Initialization"],[13,"Proposal"],[13,"Complaint"],[13,"Justification"],[13,"Acknowledgment"],[3,"Outcome"],[3,"KeyGen"],[3,"Member"],[3,"KeyInfo"],[3,"Part"],[3,"Acknowledgment"],[3,"NodeID"],[3,"PublicKey"],[3,"SecretKey"],[3,"Signature"],[3,"PublicKey"],[3,"SecretKey"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);